{"ast":null,"code":"var _StorageService;\nconst STORAGE_KEYS = {\n  WORD_PROGRESS: 'wordGame_wordProgress',\n  STUDY_SESSIONS: 'wordGame_studySessions',\n  USER_STATS: 'wordGame_userStats',\n  GAME_STATE: 'wordGame_gameState',\n  FAVORITES: 'wordGame_favorites',\n  SETTINGS: 'wordGame_settings'\n};\n\n// 通用存储操作\nclass StorageService {\n  static getInstance() {\n    if (!StorageService.instance) {\n      StorageService.instance = new StorageService();\n    }\n    return StorageService.instance;\n  }\n  setItem(key, value) {\n    try {\n      localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error(`Failed to save to localStorage: ${key}`, error);\n    }\n  }\n  getItem(key, defaultValue) {\n    try {\n      const item = localStorage.getItem(key);\n      if (item === null) {\n        return defaultValue;\n      }\n      return JSON.parse(item);\n    } catch (error) {\n      console.error(`Failed to read from localStorage: ${key}`, error);\n      return defaultValue;\n    }\n  }\n  removeItem(key) {\n    try {\n      localStorage.removeItem(key);\n    } catch (error) {\n      console.error(`Failed to remove from localStorage: ${key}`, error);\n    }\n  }\n\n  // 单词进度管理\n  getWordProgress() {\n    const progressArray = this.getItem(STORAGE_KEYS.WORD_PROGRESS, []);\n    const progressMap = new Map();\n    progressArray.forEach(progress => {\n      // 确保日期对象正确转换\n      if (typeof progress.lastStudied === 'string') {\n        progress.lastStudied = new Date(progress.lastStudied);\n      }\n      progressMap.set(progress.wordId, progress);\n    });\n    return progressMap;\n  }\n  saveWordProgress(progressMap) {\n    const progressArray = Array.from(progressMap.values());\n    this.setItem(STORAGE_KEYS.WORD_PROGRESS, progressArray);\n  }\n  updateWordProgress(wordId, updates) {\n    const progressMap = this.getWordProgress();\n    const current = progressMap.get(wordId) || {\n      wordId,\n      learned: false,\n      favorited: false,\n      correctCount: 0,\n      incorrectCount: 0,\n      lastStudied: new Date(),\n      streak: 0\n    };\n    const updated = {\n      ...current,\n      ...updates,\n      lastStudied: new Date()\n    };\n    progressMap.set(wordId, updated);\n    this.saveWordProgress(progressMap);\n  }\n\n  // 学习会话管理\n  getStudySessions() {\n    const sessions = this.getItem(STORAGE_KEYS.STUDY_SESSIONS, []);\n    return sessions.map(session => ({\n      ...session,\n      startTime: new Date(session.startTime),\n      endTime: new Date(session.endTime)\n    }));\n  }\n  saveStudySession(session) {\n    const sessions = this.getStudySessions();\n    sessions.push(session);\n    // 只保留最近50次会话\n    if (sessions.length > 50) {\n      sessions.splice(0, sessions.length - 50);\n    }\n    this.setItem(STORAGE_KEYS.STUDY_SESSIONS, sessions);\n  }\n\n  // 用户统计管理\n  getUserStats() {\n    const defaultStats = {\n      totalWordsLearned: 0,\n      totalTestsTaken: 0,\n      averageScore: 0,\n      maxCombo: 0,\n      totalStudyTime: 0,\n      achievements: [],\n      level: 1,\n      experience: 0\n    };\n    const stats = this.getItem(STORAGE_KEYS.USER_STATS, defaultStats);\n\n    // 确保成就对象的日期正确转换\n    stats.achievements = stats.achievements.map(achievement => ({\n      ...achievement,\n      unlockedAt: new Date(achievement.unlockedAt)\n    }));\n    return stats;\n  }\n  saveUserStats(stats) {\n    this.setItem(STORAGE_KEYS.USER_STATS, stats);\n  }\n  updateUserStats(updates) {\n    const current = this.getUserStats();\n    const updated = {\n      ...current,\n      ...updates\n    };\n    this.saveUserStats(updated);\n  }\n\n  // 游戏状态管理\n  getGameState() {\n    const defaultState = {\n      currentMode: 'menu',\n      currentWordIndex: 0,\n      score: 0,\n      combo: 0,\n      health: 100,\n      maxHealth: 100,\n      questionsAnswered: 0,\n      totalQuestions: 10\n    };\n    return this.getItem(STORAGE_KEYS.GAME_STATE, defaultState);\n  }\n  saveGameState(state) {\n    this.setItem(STORAGE_KEYS.GAME_STATE, state);\n  }\n\n  // 收藏单词管理\n  getFavorites() {\n    return this.getItem(STORAGE_KEYS.FAVORITES, []);\n  }\n  addToFavorites(wordId) {\n    const favorites = this.getFavorites();\n    if (!favorites.includes(wordId)) {\n      favorites.push(wordId);\n      this.setItem(STORAGE_KEYS.FAVORITES, favorites);\n    }\n  }\n  removeFromFavorites(wordId) {\n    const favorites = this.getFavorites();\n    const filtered = favorites.filter(id => id !== wordId);\n    this.setItem(STORAGE_KEYS.FAVORITES, filtered);\n  }\n  isFavorited(wordId) {\n    return this.getFavorites().includes(wordId);\n  }\n\n  // 设置管理\n  getSettings() {\n    return this.getItem(STORAGE_KEYS.SETTINGS, {\n      soundEnabled: true,\n      animationsEnabled: true,\n      difficulty: 'medium',\n      autoPlay: true,\n      theme: 'pixel'\n    });\n  }\n  saveSettings(settings) {\n    this.setItem(STORAGE_KEYS.SETTINGS, settings);\n  }\n\n  // 数据导入导出\n  exportData() {\n    const data = {\n      wordProgress: Array.from(this.getWordProgress().values()),\n      studySessions: this.getStudySessions(),\n      userStats: this.getUserStats(),\n      favorites: this.getFavorites(),\n      settings: this.getSettings(),\n      exportDate: new Date()\n    };\n    return JSON.stringify(data, null, 2);\n  }\n  importData(jsonData) {\n    try {\n      const data = JSON.parse(jsonData);\n      if (data.wordProgress) {\n        this.setItem(STORAGE_KEYS.WORD_PROGRESS, data.wordProgress);\n      }\n      if (data.studySessions) {\n        this.setItem(STORAGE_KEYS.STUDY_SESSIONS, data.studySessions);\n      }\n      if (data.userStats) {\n        this.setItem(STORAGE_KEYS.USER_STATS, data.userStats);\n      }\n      if (data.favorites) {\n        this.setItem(STORAGE_KEYS.FAVORITES, data.favorites);\n      }\n      if (data.settings) {\n        this.setItem(STORAGE_KEYS.SETTINGS, data.settings);\n      }\n      return true;\n    } catch (error) {\n      console.error('Failed to import data:', error);\n      return false;\n    }\n  }\n\n  // 清除所有数据\n  clearAllData() {\n    Object.values(STORAGE_KEYS).forEach(key => {\n      this.removeItem(key);\n    });\n  }\n\n  // 获取存储使用情况\n  getStorageInfo() {\n    try {\n      let used = 0;\n      Object.values(STORAGE_KEYS).forEach(key => {\n        const item = localStorage.getItem(key);\n        if (item) {\n          used += item.length;\n        }\n      });\n\n      // 估算可用空间（大多数浏览器为5MB）\n      const available = 5 * 1024 * 1024; // 5MB in bytes\n      const percentage = used / available * 100;\n      return {\n        used,\n        available,\n        percentage\n      };\n    } catch (error) {\n      console.error('Failed to get storage info:', error);\n      return {\n        used: 0,\n        available: 0,\n        percentage: 0\n      };\n    }\n  }\n}\n\n// 导出单例实例\n_StorageService = StorageService;\nStorageService.instance = void 0;\nexport const storageService = StorageService.getInstance();\n\n// 导出一些便捷函数\nexport const saveWordProgress = (wordId, updates) => {\n  storageService.updateWordProgress(wordId, updates);\n};\nexport const toggleFavorite = wordId => {\n  if (storageService.isFavorited(wordId)) {\n    storageService.removeFromFavorites(wordId);\n  } else {\n    storageService.addToFavorites(wordId);\n  }\n};\nexport const getWordStats = wordId => {\n  const progressMap = storageService.getWordProgress();\n  return progressMap.get(wordId) || null;\n};\nexport const calculateLevel = experience => {\n  return Math.floor(experience / 100) + 1;\n};\nexport const getExperienceForNextLevel = currentExp => {\n  const currentLevel = calculateLevel(currentExp);\n  return currentLevel * 100 - currentExp;\n};","map":{"version":3,"names":["STORAGE_KEYS","WORD_PROGRESS","STUDY_SESSIONS","USER_STATS","GAME_STATE","FAVORITES","SETTINGS","StorageService","getInstance","instance","setItem","key","value","localStorage","JSON","stringify","error","console","getItem","defaultValue","item","parse","removeItem","getWordProgress","progressArray","progressMap","Map","forEach","progress","lastStudied","Date","set","wordId","saveWordProgress","Array","from","values","updateWordProgress","updates","current","get","learned","favorited","correctCount","incorrectCount","streak","updated","getStudySessions","sessions","map","session","startTime","endTime","saveStudySession","push","length","splice","getUserStats","defaultStats","totalWordsLearned","totalTestsTaken","averageScore","maxCombo","totalStudyTime","achievements","level","experience","stats","achievement","unlockedAt","saveUserStats","updateUserStats","getGameState","defaultState","currentMode","currentWordIndex","score","combo","health","maxHealth","questionsAnswered","totalQuestions","saveGameState","state","getFavorites","addToFavorites","favorites","includes","removeFromFavorites","filtered","filter","id","isFavorited","getSettings","soundEnabled","animationsEnabled","difficulty","autoPlay","theme","saveSettings","settings","exportData","data","wordProgress","studySessions","userStats","exportDate","importData","jsonData","clearAllData","Object","getStorageInfo","used","available","percentage","_StorageService","storageService","toggleFavorite","getWordStats","calculateLevel","Math","floor","getExperienceForNextLevel","currentExp","currentLevel"],"sources":["/Users/jiaoxiangru/Code/Claude/word-game/word-game/src/utils/storage.ts"],"sourcesContent":["import { WordProgress, StudySession, UserStats, GameState } from '../types/word';\n\nconst STORAGE_KEYS = {\n  WORD_PROGRESS: 'wordGame_wordProgress',\n  STUDY_SESSIONS: 'wordGame_studySessions',\n  USER_STATS: 'wordGame_userStats',\n  GAME_STATE: 'wordGame_gameState',\n  FAVORITES: 'wordGame_favorites',\n  SETTINGS: 'wordGame_settings'\n};\n\n// 通用存储操作\nclass StorageService {\n  private static instance: StorageService;\n\n  static getInstance(): StorageService {\n    if (!StorageService.instance) {\n      StorageService.instance = new StorageService();\n    }\n    return StorageService.instance;\n  }\n\n  private setItem<T>(key: string, value: T): void {\n    try {\n      localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error(`Failed to save to localStorage: ${key}`, error);\n    }\n  }\n\n  private getItem<T>(key: string, defaultValue: T): T {\n    try {\n      const item = localStorage.getItem(key);\n      if (item === null) {\n        return defaultValue;\n      }\n      return JSON.parse(item) as T;\n    } catch (error) {\n      console.error(`Failed to read from localStorage: ${key}`, error);\n      return defaultValue;\n    }\n  }\n\n  private removeItem(key: string): void {\n    try {\n      localStorage.removeItem(key);\n    } catch (error) {\n      console.error(`Failed to remove from localStorage: ${key}`, error);\n    }\n  }\n\n  // 单词进度管理\n  getWordProgress(): Map<string, WordProgress> {\n    const progressArray = this.getItem<WordProgress[]>(STORAGE_KEYS.WORD_PROGRESS, []);\n    const progressMap = new Map<string, WordProgress>();\n    \n    progressArray.forEach(progress => {\n      // 确保日期对象正确转换\n      if (typeof progress.lastStudied === 'string') {\n        progress.lastStudied = new Date(progress.lastStudied);\n      }\n      progressMap.set(progress.wordId, progress);\n    });\n    \n    return progressMap;\n  }\n\n  saveWordProgress(progressMap: Map<string, WordProgress>): void {\n    const progressArray = Array.from(progressMap.values());\n    this.setItem(STORAGE_KEYS.WORD_PROGRESS, progressArray);\n  }\n\n  updateWordProgress(wordId: string, updates: Partial<WordProgress>): void {\n    const progressMap = this.getWordProgress();\n    const current = progressMap.get(wordId) || {\n      wordId,\n      learned: false,\n      favorited: false,\n      correctCount: 0,\n      incorrectCount: 0,\n      lastStudied: new Date(),\n      streak: 0\n    };\n\n    const updated = { ...current, ...updates, lastStudied: new Date() };\n    progressMap.set(wordId, updated);\n    this.saveWordProgress(progressMap);\n  }\n\n  // 学习会话管理\n  getStudySessions(): StudySession[] {\n    const sessions = this.getItem<StudySession[]>(STORAGE_KEYS.STUDY_SESSIONS, []);\n    return sessions.map(session => ({\n      ...session,\n      startTime: new Date(session.startTime),\n      endTime: new Date(session.endTime)\n    }));\n  }\n\n  saveStudySession(session: StudySession): void {\n    const sessions = this.getStudySessions();\n    sessions.push(session);\n    // 只保留最近50次会话\n    if (sessions.length > 50) {\n      sessions.splice(0, sessions.length - 50);\n    }\n    this.setItem(STORAGE_KEYS.STUDY_SESSIONS, sessions);\n  }\n\n  // 用户统计管理\n  getUserStats(): UserStats {\n    const defaultStats: UserStats = {\n      totalWordsLearned: 0,\n      totalTestsTaken: 0,\n      averageScore: 0,\n      maxCombo: 0,\n      totalStudyTime: 0,\n      achievements: [],\n      level: 1,\n      experience: 0\n    };\n\n    const stats = this.getItem<UserStats>(STORAGE_KEYS.USER_STATS, defaultStats);\n    \n    // 确保成就对象的日期正确转换\n    stats.achievements = stats.achievements.map(achievement => ({\n      ...achievement,\n      unlockedAt: new Date(achievement.unlockedAt)\n    }));\n\n    return stats;\n  }\n\n  saveUserStats(stats: UserStats): void {\n    this.setItem(STORAGE_KEYS.USER_STATS, stats);\n  }\n\n  updateUserStats(updates: Partial<UserStats>): void {\n    const current = this.getUserStats();\n    const updated = { ...current, ...updates };\n    this.saveUserStats(updated);\n  }\n\n  // 游戏状态管理\n  getGameState(): GameState {\n    const defaultState: GameState = {\n      currentMode: 'menu',\n      currentWordIndex: 0,\n      score: 0,\n      combo: 0,\n      health: 100,\n      maxHealth: 100,\n      questionsAnswered: 0,\n      totalQuestions: 10\n    };\n\n    return this.getItem<GameState>(STORAGE_KEYS.GAME_STATE, defaultState);\n  }\n\n  saveGameState(state: GameState): void {\n    this.setItem(STORAGE_KEYS.GAME_STATE, state);\n  }\n\n  // 收藏单词管理\n  getFavorites(): string[] {\n    return this.getItem<string[]>(STORAGE_KEYS.FAVORITES, []);\n  }\n\n  addToFavorites(wordId: string): void {\n    const favorites = this.getFavorites();\n    if (!favorites.includes(wordId)) {\n      favorites.push(wordId);\n      this.setItem(STORAGE_KEYS.FAVORITES, favorites);\n    }\n  }\n\n  removeFromFavorites(wordId: string): void {\n    const favorites = this.getFavorites();\n    const filtered = favorites.filter(id => id !== wordId);\n    this.setItem(STORAGE_KEYS.FAVORITES, filtered);\n  }\n\n  isFavorited(wordId: string): boolean {\n    return this.getFavorites().includes(wordId);\n  }\n\n  // 设置管理\n  getSettings(): any {\n    return this.getItem(STORAGE_KEYS.SETTINGS, {\n      soundEnabled: true,\n      animationsEnabled: true,\n      difficulty: 'medium',\n      autoPlay: true,\n      theme: 'pixel'\n    });\n  }\n\n  saveSettings(settings: any): void {\n    this.setItem(STORAGE_KEYS.SETTINGS, settings);\n  }\n\n  // 数据导入导出\n  exportData(): string {\n    const data = {\n      wordProgress: Array.from(this.getWordProgress().values()),\n      studySessions: this.getStudySessions(),\n      userStats: this.getUserStats(),\n      favorites: this.getFavorites(),\n      settings: this.getSettings(),\n      exportDate: new Date()\n    };\n\n    return JSON.stringify(data, null, 2);\n  }\n\n  importData(jsonData: string): boolean {\n    try {\n      const data = JSON.parse(jsonData);\n      \n      if (data.wordProgress) {\n        this.setItem(STORAGE_KEYS.WORD_PROGRESS, data.wordProgress);\n      }\n      \n      if (data.studySessions) {\n        this.setItem(STORAGE_KEYS.STUDY_SESSIONS, data.studySessions);\n      }\n      \n      if (data.userStats) {\n        this.setItem(STORAGE_KEYS.USER_STATS, data.userStats);\n      }\n      \n      if (data.favorites) {\n        this.setItem(STORAGE_KEYS.FAVORITES, data.favorites);\n      }\n      \n      if (data.settings) {\n        this.setItem(STORAGE_KEYS.SETTINGS, data.settings);\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Failed to import data:', error);\n      return false;\n    }\n  }\n\n  // 清除所有数据\n  clearAllData(): void {\n    Object.values(STORAGE_KEYS).forEach(key => {\n      this.removeItem(key);\n    });\n  }\n\n  // 获取存储使用情况\n  getStorageInfo(): { used: number; available: number; percentage: number } {\n    try {\n      let used = 0;\n      Object.values(STORAGE_KEYS).forEach(key => {\n        const item = localStorage.getItem(key);\n        if (item) {\n          used += item.length;\n        }\n      });\n\n      // 估算可用空间（大多数浏览器为5MB）\n      const available = 5 * 1024 * 1024; // 5MB in bytes\n      const percentage = (used / available) * 100;\n\n      return { used, available, percentage };\n    } catch (error) {\n      console.error('Failed to get storage info:', error);\n      return { used: 0, available: 0, percentage: 0 };\n    }\n  }\n}\n\n// 导出单例实例\nexport const storageService = StorageService.getInstance();\n\n// 导出一些便捷函数\nexport const saveWordProgress = (wordId: string, updates: Partial<WordProgress>) => {\n  storageService.updateWordProgress(wordId, updates);\n};\n\nexport const toggleFavorite = (wordId: string) => {\n  if (storageService.isFavorited(wordId)) {\n    storageService.removeFromFavorites(wordId);\n  } else {\n    storageService.addToFavorites(wordId);\n  }\n};\n\nexport const getWordStats = (wordId: string): WordProgress | null => {\n  const progressMap = storageService.getWordProgress();\n  return progressMap.get(wordId) || null;\n};\n\nexport const calculateLevel = (experience: number): number => {\n  return Math.floor(experience / 100) + 1;\n};\n\nexport const getExperienceForNextLevel = (currentExp: number): number => {\n  const currentLevel = calculateLevel(currentExp);\n  return currentLevel * 100 - currentExp;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}