{"ast":null,"code":"import _objectSpread from\"/Users/jiaoxiangru/Code/Claude/word-game/word-game/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";var _StorageService;const STORAGE_KEYS={WORD_PROGRESS:'wordGame_wordProgress',STUDY_SESSIONS:'wordGame_studySessions',USER_STATS:'wordGame_userStats',GAME_STATE:'wordGame_gameState',FAVORITES:'wordGame_favorites',SETTINGS:'wordGame_settings'};// 通用存储操作\nclass StorageService{static getInstance(){if(!StorageService.instance){StorageService.instance=new StorageService();}return StorageService.instance;}setItem(key,value){try{localStorage.setItem(key,JSON.stringify(value));}catch(error){console.error(\"Failed to save to localStorage: \".concat(key),error);}}getItem(key,defaultValue){try{const item=localStorage.getItem(key);if(item===null){return defaultValue;}return JSON.parse(item);}catch(error){console.error(\"Failed to read from localStorage: \".concat(key),error);return defaultValue;}}removeItem(key){try{localStorage.removeItem(key);}catch(error){console.error(\"Failed to remove from localStorage: \".concat(key),error);}}// 单词进度管理\ngetWordProgress(){const progressArray=this.getItem(STORAGE_KEYS.WORD_PROGRESS,[]);const progressMap=new Map();progressArray.forEach(progress=>{// 确保日期对象正确转换\nif(typeof progress.lastStudied==='string'){progress.lastStudied=new Date(progress.lastStudied);}progressMap.set(progress.wordId,progress);});return progressMap;}saveWordProgress(progressMap){const progressArray=Array.from(progressMap.values());this.setItem(STORAGE_KEYS.WORD_PROGRESS,progressArray);}updateWordProgress(wordId,updates){const progressMap=this.getWordProgress();const current=progressMap.get(wordId)||{wordId,learned:false,favorited:false,correctCount:0,incorrectCount:0,lastStudied:new Date(),streak:0};const updated=_objectSpread(_objectSpread(_objectSpread({},current),updates),{},{lastStudied:new Date()});progressMap.set(wordId,updated);this.saveWordProgress(progressMap);}// 学习会话管理\ngetStudySessions(){const sessions=this.getItem(STORAGE_KEYS.STUDY_SESSIONS,[]);return sessions.map(session=>_objectSpread(_objectSpread({},session),{},{startTime:new Date(session.startTime),endTime:new Date(session.endTime)}));}saveStudySession(session){const sessions=this.getStudySessions();sessions.push(session);// 只保留最近50次会话\nif(sessions.length>50){sessions.splice(0,sessions.length-50);}this.setItem(STORAGE_KEYS.STUDY_SESSIONS,sessions);}// 用户统计管理\ngetUserStats(){const defaultStats={totalWordsLearned:0,totalTestsTaken:0,averageScore:0,maxCombo:0,totalStudyTime:0,achievements:[],level:1,experience:0};const stats=this.getItem(STORAGE_KEYS.USER_STATS,defaultStats);// 确保成就对象的日期正确转换\nstats.achievements=stats.achievements.map(achievement=>_objectSpread(_objectSpread({},achievement),{},{unlockedAt:new Date(achievement.unlockedAt)}));return stats;}saveUserStats(stats){this.setItem(STORAGE_KEYS.USER_STATS,stats);}updateUserStats(updates){const current=this.getUserStats();const updated=_objectSpread(_objectSpread({},current),updates);this.saveUserStats(updated);}// 游戏状态管理\ngetGameState(){const defaultState={currentMode:'menu',currentWordIndex:0,score:0,combo:0,health:100,maxHealth:100,questionsAnswered:0,totalQuestions:10};return this.getItem(STORAGE_KEYS.GAME_STATE,defaultState);}saveGameState(state){this.setItem(STORAGE_KEYS.GAME_STATE,state);}// 收藏单词管理\ngetFavorites(){return this.getItem(STORAGE_KEYS.FAVORITES,[]);}addToFavorites(wordId){const favorites=this.getFavorites();if(!favorites.includes(wordId)){favorites.push(wordId);this.setItem(STORAGE_KEYS.FAVORITES,favorites);}}removeFromFavorites(wordId){const favorites=this.getFavorites();const filtered=favorites.filter(id=>id!==wordId);this.setItem(STORAGE_KEYS.FAVORITES,filtered);}isFavorited(wordId){return this.getFavorites().includes(wordId);}// 设置管理\ngetSettings(){return this.getItem(STORAGE_KEYS.SETTINGS,{soundEnabled:true,animationsEnabled:true,difficulty:'medium',autoPlay:true,theme:'pixel'});}saveSettings(settings){this.setItem(STORAGE_KEYS.SETTINGS,settings);}// 数据导入导出\nexportData(){const data={wordProgress:Array.from(this.getWordProgress().values()),studySessions:this.getStudySessions(),userStats:this.getUserStats(),favorites:this.getFavorites(),settings:this.getSettings(),exportDate:new Date()};return JSON.stringify(data,null,2);}importData(jsonData){try{const data=JSON.parse(jsonData);if(data.wordProgress){this.setItem(STORAGE_KEYS.WORD_PROGRESS,data.wordProgress);}if(data.studySessions){this.setItem(STORAGE_KEYS.STUDY_SESSIONS,data.studySessions);}if(data.userStats){this.setItem(STORAGE_KEYS.USER_STATS,data.userStats);}if(data.favorites){this.setItem(STORAGE_KEYS.FAVORITES,data.favorites);}if(data.settings){this.setItem(STORAGE_KEYS.SETTINGS,data.settings);}return true;}catch(error){console.error('Failed to import data:',error);return false;}}// 清除所有数据\nclearAllData(){Object.values(STORAGE_KEYS).forEach(key=>{this.removeItem(key);});}// 获取存储使用情况\ngetStorageInfo(){try{let used=0;Object.values(STORAGE_KEYS).forEach(key=>{const item=localStorage.getItem(key);if(item){used+=item.length;}});// 估算可用空间（大多数浏览器为5MB）\nconst available=5*1024*1024;// 5MB in bytes\nconst percentage=used/available*100;return{used,available,percentage};}catch(error){console.error('Failed to get storage info:',error);return{used:0,available:0,percentage:0};}}}// 导出单例实例\n_StorageService=StorageService;StorageService.instance=void 0;export const storageService=StorageService.getInstance();// 导出一些便捷函数\nexport const saveWordProgress=(wordId,updates)=>{storageService.updateWordProgress(wordId,updates);};export const toggleFavorite=wordId=>{if(storageService.isFavorited(wordId)){storageService.removeFromFavorites(wordId);}else{storageService.addToFavorites(wordId);}};export const getWordStats=wordId=>{const progressMap=storageService.getWordProgress();return progressMap.get(wordId)||null;};export const calculateLevel=experience=>{return Math.floor(experience/100)+1;};export const getExperienceForNextLevel=currentExp=>{const currentLevel=calculateLevel(currentExp);return currentLevel*100-currentExp;};","map":{"version":3,"names":["STORAGE_KEYS","WORD_PROGRESS","STUDY_SESSIONS","USER_STATS","GAME_STATE","FAVORITES","SETTINGS","StorageService","getInstance","instance","setItem","key","value","localStorage","JSON","stringify","error","console","concat","getItem","defaultValue","item","parse","removeItem","getWordProgress","progressArray","progressMap","Map","forEach","progress","lastStudied","Date","set","wordId","saveWordProgress","Array","from","values","updateWordProgress","updates","current","get","learned","favorited","correctCount","incorrectCount","streak","updated","_objectSpread","getStudySessions","sessions","map","session","startTime","endTime","saveStudySession","push","length","splice","getUserStats","defaultStats","totalWordsLearned","totalTestsTaken","averageScore","maxCombo","totalStudyTime","achievements","level","experience","stats","achievement","unlockedAt","saveUserStats","updateUserStats","getGameState","defaultState","currentMode","currentWordIndex","score","combo","health","maxHealth","questionsAnswered","totalQuestions","saveGameState","state","getFavorites","addToFavorites","favorites","includes","removeFromFavorites","filtered","filter","id","isFavorited","getSettings","soundEnabled","animationsEnabled","difficulty","autoPlay","theme","saveSettings","settings","exportData","data","wordProgress","studySessions","userStats","exportDate","importData","jsonData","clearAllData","Object","getStorageInfo","used","available","percentage","_StorageService","storageService","toggleFavorite","getWordStats","calculateLevel","Math","floor","getExperienceForNextLevel","currentExp","currentLevel"],"sources":["/Users/jiaoxiangru/Code/Claude/word-game/word-game/src/utils/storage.ts"],"sourcesContent":["import { WordProgress, StudySession, UserStats, GameState } from '../types/word';\n\nconst STORAGE_KEYS = {\n  WORD_PROGRESS: 'wordGame_wordProgress',\n  STUDY_SESSIONS: 'wordGame_studySessions',\n  USER_STATS: 'wordGame_userStats',\n  GAME_STATE: 'wordGame_gameState',\n  FAVORITES: 'wordGame_favorites',\n  SETTINGS: 'wordGame_settings'\n};\n\n// 通用存储操作\nclass StorageService {\n  private static instance: StorageService;\n\n  static getInstance(): StorageService {\n    if (!StorageService.instance) {\n      StorageService.instance = new StorageService();\n    }\n    return StorageService.instance;\n  }\n\n  private setItem<T>(key: string, value: T): void {\n    try {\n      localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error(`Failed to save to localStorage: ${key}`, error);\n    }\n  }\n\n  private getItem<T>(key: string, defaultValue: T): T {\n    try {\n      const item = localStorage.getItem(key);\n      if (item === null) {\n        return defaultValue;\n      }\n      return JSON.parse(item) as T;\n    } catch (error) {\n      console.error(`Failed to read from localStorage: ${key}`, error);\n      return defaultValue;\n    }\n  }\n\n  private removeItem(key: string): void {\n    try {\n      localStorage.removeItem(key);\n    } catch (error) {\n      console.error(`Failed to remove from localStorage: ${key}`, error);\n    }\n  }\n\n  // 单词进度管理\n  getWordProgress(): Map<string, WordProgress> {\n    const progressArray = this.getItem<WordProgress[]>(STORAGE_KEYS.WORD_PROGRESS, []);\n    const progressMap = new Map<string, WordProgress>();\n    \n    progressArray.forEach(progress => {\n      // 确保日期对象正确转换\n      if (typeof progress.lastStudied === 'string') {\n        progress.lastStudied = new Date(progress.lastStudied);\n      }\n      progressMap.set(progress.wordId, progress);\n    });\n    \n    return progressMap;\n  }\n\n  saveWordProgress(progressMap: Map<string, WordProgress>): void {\n    const progressArray = Array.from(progressMap.values());\n    this.setItem(STORAGE_KEYS.WORD_PROGRESS, progressArray);\n  }\n\n  updateWordProgress(wordId: string, updates: Partial<WordProgress>): void {\n    const progressMap = this.getWordProgress();\n    const current = progressMap.get(wordId) || {\n      wordId,\n      learned: false,\n      favorited: false,\n      correctCount: 0,\n      incorrectCount: 0,\n      lastStudied: new Date(),\n      streak: 0\n    };\n\n    const updated = { ...current, ...updates, lastStudied: new Date() };\n    progressMap.set(wordId, updated);\n    this.saveWordProgress(progressMap);\n  }\n\n  // 学习会话管理\n  getStudySessions(): StudySession[] {\n    const sessions = this.getItem<StudySession[]>(STORAGE_KEYS.STUDY_SESSIONS, []);\n    return sessions.map(session => ({\n      ...session,\n      startTime: new Date(session.startTime),\n      endTime: new Date(session.endTime)\n    }));\n  }\n\n  saveStudySession(session: StudySession): void {\n    const sessions = this.getStudySessions();\n    sessions.push(session);\n    // 只保留最近50次会话\n    if (sessions.length > 50) {\n      sessions.splice(0, sessions.length - 50);\n    }\n    this.setItem(STORAGE_KEYS.STUDY_SESSIONS, sessions);\n  }\n\n  // 用户统计管理\n  getUserStats(): UserStats {\n    const defaultStats: UserStats = {\n      totalWordsLearned: 0,\n      totalTestsTaken: 0,\n      averageScore: 0,\n      maxCombo: 0,\n      totalStudyTime: 0,\n      achievements: [],\n      level: 1,\n      experience: 0\n    };\n\n    const stats = this.getItem<UserStats>(STORAGE_KEYS.USER_STATS, defaultStats);\n    \n    // 确保成就对象的日期正确转换\n    stats.achievements = stats.achievements.map(achievement => ({\n      ...achievement,\n      unlockedAt: new Date(achievement.unlockedAt)\n    }));\n\n    return stats;\n  }\n\n  saveUserStats(stats: UserStats): void {\n    this.setItem(STORAGE_KEYS.USER_STATS, stats);\n  }\n\n  updateUserStats(updates: Partial<UserStats>): void {\n    const current = this.getUserStats();\n    const updated = { ...current, ...updates };\n    this.saveUserStats(updated);\n  }\n\n  // 游戏状态管理\n  getGameState(): GameState {\n    const defaultState: GameState = {\n      currentMode: 'menu',\n      currentWordIndex: 0,\n      score: 0,\n      combo: 0,\n      health: 100,\n      maxHealth: 100,\n      questionsAnswered: 0,\n      totalQuestions: 10\n    };\n\n    return this.getItem<GameState>(STORAGE_KEYS.GAME_STATE, defaultState);\n  }\n\n  saveGameState(state: GameState): void {\n    this.setItem(STORAGE_KEYS.GAME_STATE, state);\n  }\n\n  // 收藏单词管理\n  getFavorites(): string[] {\n    return this.getItem<string[]>(STORAGE_KEYS.FAVORITES, []);\n  }\n\n  addToFavorites(wordId: string): void {\n    const favorites = this.getFavorites();\n    if (!favorites.includes(wordId)) {\n      favorites.push(wordId);\n      this.setItem(STORAGE_KEYS.FAVORITES, favorites);\n    }\n  }\n\n  removeFromFavorites(wordId: string): void {\n    const favorites = this.getFavorites();\n    const filtered = favorites.filter(id => id !== wordId);\n    this.setItem(STORAGE_KEYS.FAVORITES, filtered);\n  }\n\n  isFavorited(wordId: string): boolean {\n    return this.getFavorites().includes(wordId);\n  }\n\n  // 设置管理\n  getSettings(): any {\n    return this.getItem(STORAGE_KEYS.SETTINGS, {\n      soundEnabled: true,\n      animationsEnabled: true,\n      difficulty: 'medium',\n      autoPlay: true,\n      theme: 'pixel'\n    });\n  }\n\n  saveSettings(settings: any): void {\n    this.setItem(STORAGE_KEYS.SETTINGS, settings);\n  }\n\n  // 数据导入导出\n  exportData(): string {\n    const data = {\n      wordProgress: Array.from(this.getWordProgress().values()),\n      studySessions: this.getStudySessions(),\n      userStats: this.getUserStats(),\n      favorites: this.getFavorites(),\n      settings: this.getSettings(),\n      exportDate: new Date()\n    };\n\n    return JSON.stringify(data, null, 2);\n  }\n\n  importData(jsonData: string): boolean {\n    try {\n      const data = JSON.parse(jsonData);\n      \n      if (data.wordProgress) {\n        this.setItem(STORAGE_KEYS.WORD_PROGRESS, data.wordProgress);\n      }\n      \n      if (data.studySessions) {\n        this.setItem(STORAGE_KEYS.STUDY_SESSIONS, data.studySessions);\n      }\n      \n      if (data.userStats) {\n        this.setItem(STORAGE_KEYS.USER_STATS, data.userStats);\n      }\n      \n      if (data.favorites) {\n        this.setItem(STORAGE_KEYS.FAVORITES, data.favorites);\n      }\n      \n      if (data.settings) {\n        this.setItem(STORAGE_KEYS.SETTINGS, data.settings);\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Failed to import data:', error);\n      return false;\n    }\n  }\n\n  // 清除所有数据\n  clearAllData(): void {\n    Object.values(STORAGE_KEYS).forEach(key => {\n      this.removeItem(key);\n    });\n  }\n\n  // 获取存储使用情况\n  getStorageInfo(): { used: number; available: number; percentage: number } {\n    try {\n      let used = 0;\n      Object.values(STORAGE_KEYS).forEach(key => {\n        const item = localStorage.getItem(key);\n        if (item) {\n          used += item.length;\n        }\n      });\n\n      // 估算可用空间（大多数浏览器为5MB）\n      const available = 5 * 1024 * 1024; // 5MB in bytes\n      const percentage = (used / available) * 100;\n\n      return { used, available, percentage };\n    } catch (error) {\n      console.error('Failed to get storage info:', error);\n      return { used: 0, available: 0, percentage: 0 };\n    }\n  }\n}\n\n// 导出单例实例\nexport const storageService = StorageService.getInstance();\n\n// 导出一些便捷函数\nexport const saveWordProgress = (wordId: string, updates: Partial<WordProgress>) => {\n  storageService.updateWordProgress(wordId, updates);\n};\n\nexport const toggleFavorite = (wordId: string) => {\n  if (storageService.isFavorited(wordId)) {\n    storageService.removeFromFavorites(wordId);\n  } else {\n    storageService.addToFavorites(wordId);\n  }\n};\n\nexport const getWordStats = (wordId: string): WordProgress | null => {\n  const progressMap = storageService.getWordProgress();\n  return progressMap.get(wordId) || null;\n};\n\nexport const calculateLevel = (experience: number): number => {\n  return Math.floor(experience / 100) + 1;\n};\n\nexport const getExperienceForNextLevel = (currentExp: number): number => {\n  const currentLevel = calculateLevel(currentExp);\n  return currentLevel * 100 - currentExp;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}